// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProject.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyProject.Models.Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AreaID"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Population")
                        .HasColumnType("integer");

                    b.HasKey("AreaID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("MyProject.Models.Bus", b =>
                {
                    b.Property<int>("BusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusID"));

                    b.Property<int>("BusType")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationNum")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("TotalCapacity")
                        .HasColumnType("integer");

                    b.HasKey("BusID");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("MyProject.Models.BusLocation", b =>
                {
                    b.Property<int>("journeyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("journeyID"));

                    b.Property<int>("BusID")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentCapacity")
                        .HasColumnType("integer");

                    b.Property<decimal>("CurrentLatitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CurrentLongitude")
                        .HasColumnType("numeric");

                    b.Property<int>("CurrentRoadID")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentRouteID")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("journeyID");

                    b.HasIndex("BusID");

                    b.HasIndex("CurrentRoadID");

                    b.HasIndex("CurrentRouteID");

                    b.ToTable("BusLocations");
                });

            modelBuilder.Entity("MyProject.Models.BusRoute", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RouteID"));

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDistance")
                        .HasColumnType("integer");

                    b.HasKey("RouteID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("MyProject.Models.BusStop", b =>
                {
                    b.Property<int>("BusStopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusStopID"));

                    b.Property<int>("AreaID")
                        .HasColumnType("integer");

                    b.Property<string>("BusStopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("CurrentLatitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CurrentLongitude")
                        .HasColumnType("numeric");

                    b.HasKey("BusStopID");

                    b.HasIndex("AreaID");

                    b.ToTable("BusStops");
                });

            modelBuilder.Entity("MyProject.Models.Popularity", b =>
                {
                    b.Property<int>("PopularityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PopularityID"));

                    b.Property<int>("BusRouteRouteID")
                        .HasColumnType("integer");

                    b.Property<int>("BusStopID")
                        .HasColumnType("integer");

                    b.Property<int>("PopularityScore")
                        .HasColumnType("integer");

                    b.Property<int>("RouteID")
                        .HasColumnType("integer");

                    b.Property<int>("StopID")
                        .HasColumnType("integer");

                    b.HasKey("PopularityID");

                    b.HasIndex("BusRouteRouteID");

                    b.HasIndex("BusStopID");

                    b.ToTable("Popularities");
                });

            modelBuilder.Entity("MyProject.Models.Road", b =>
                {
                    b.Property<int>("RoadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoadID"));

                    b.Property<string>("RoadName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoadID");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("MyProject.Models.Roadwork", b =>
                {
                    b.Property<int>("RoadworkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoadworkID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoadID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RoadworkID");

                    b.HasIndex("RoadID");

                    b.ToTable("Roadworks");
                });

            modelBuilder.Entity("MyProject.Models.ScheduledJourney", b =>
                {
                    b.Property<int>("JourneyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JourneyID"));

                    b.Property<DateTime?>("ActArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BusID")
                        .HasColumnType("integer");

                    b.Property<int>("BusRouteRouteID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RouteID")
                        .HasColumnType("integer");

                    b.HasKey("JourneyID");

                    b.HasIndex("BusID");

                    b.HasIndex("BusRouteRouteID");

                    b.ToTable("ScheduledJourneys");
                });

            modelBuilder.Entity("MyProject.Models.StopSequence", b =>
                {
                    b.Property<int>("SequenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SequenceID"));

                    b.Property<int>("BusStopID")
                        .HasColumnType("integer");

                    b.Property<int>("RouteID")
                        .HasColumnType("integer");

                    b.Property<int>("StopID")
                        .HasColumnType("integer");

                    b.Property<int>("StopOrder")
                        .HasColumnType("integer");

                    b.Property<int>("busRouteRouteID")
                        .HasColumnType("integer");

                    b.HasKey("SequenceID");

                    b.HasIndex("BusStopID");

                    b.HasIndex("busRouteRouteID");

                    b.ToTable("StopSequences");
                });

            modelBuilder.Entity("MyProject.Models.TrafficCondition", b =>
                {
                    b.Property<int>("TrafficID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrafficID"));

                    b.Property<int>("CurrentCondition")
                        .HasColumnType("integer");

                    b.Property<int>("RoadID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TrafficID");

                    b.HasIndex("RoadID");

                    b.ToTable("TrafficConditions");
                });

            modelBuilder.Entity("MyProject.Models.BusLocation", b =>
                {
                    b.HasOne("MyProject.Models.Bus", "Bus")
                        .WithMany("BusLocations")
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyProject.Models.Road", "CurrentRoad")
                        .WithMany()
                        .HasForeignKey("CurrentRoadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyProject.Models.BusRoute", "CurrentRoute")
                        .WithMany("busLocations")
                        .HasForeignKey("CurrentRouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("CurrentRoad");

                    b.Navigation("CurrentRoute");
                });

            modelBuilder.Entity("MyProject.Models.BusStop", b =>
                {
                    b.HasOne("MyProject.Models.Area", "Area")
                        .WithMany("BusStops")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("MyProject.Models.Popularity", b =>
                {
                    b.HasOne("MyProject.Models.BusRoute", "BusRoute")
                        .WithMany("popularity")
                        .HasForeignKey("BusRouteRouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyProject.Models.BusStop", "BusStop")
                        .WithMany("Popularity")
                        .HasForeignKey("BusStopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusRoute");

                    b.Navigation("BusStop");
                });

            modelBuilder.Entity("MyProject.Models.Roadwork", b =>
                {
                    b.HasOne("MyProject.Models.Road", "Roads")
                        .WithMany("Roadworks")
                        .HasForeignKey("RoadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roads");
                });

            modelBuilder.Entity("MyProject.Models.ScheduledJourney", b =>
                {
                    b.HasOne("MyProject.Models.Bus", "Bus")
                        .WithMany("ScheduledJourneys")
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyProject.Models.BusRoute", "BusRoute")
                        .WithMany("ScheduledJourneys")
                        .HasForeignKey("BusRouteRouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("MyProject.Models.StopSequence", b =>
                {
                    b.HasOne("MyProject.Models.BusStop", "busStop")
                        .WithMany("StopSequences")
                        .HasForeignKey("BusStopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyProject.Models.BusRoute", "busRoute")
                        .WithMany("stopSequences")
                        .HasForeignKey("busRouteRouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("busRoute");

                    b.Navigation("busStop");
                });

            modelBuilder.Entity("MyProject.Models.TrafficCondition", b =>
                {
                    b.HasOne("MyProject.Models.Road", "road")
                        .WithMany("TrafficConditions")
                        .HasForeignKey("RoadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("road");
                });

            modelBuilder.Entity("MyProject.Models.Area", b =>
                {
                    b.Navigation("BusStops");
                });

            modelBuilder.Entity("MyProject.Models.Bus", b =>
                {
                    b.Navigation("BusLocations");

                    b.Navigation("ScheduledJourneys");
                });

            modelBuilder.Entity("MyProject.Models.BusRoute", b =>
                {
                    b.Navigation("ScheduledJourneys");

                    b.Navigation("busLocations");

                    b.Navigation("popularity");

                    b.Navigation("stopSequences");
                });

            modelBuilder.Entity("MyProject.Models.BusStop", b =>
                {
                    b.Navigation("Popularity");

                    b.Navigation("StopSequences");
                });

            modelBuilder.Entity("MyProject.Models.Road", b =>
                {
                    b.Navigation("Roadworks");

                    b.Navigation("TrafficConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
